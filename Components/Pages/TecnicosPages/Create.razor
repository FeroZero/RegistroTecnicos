@page "/Tecnico/Create"
@inject TecnicoService tecnicoService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<EditForm Model="tecnico" OnValidSubmit="Guardar">
	<DataAnnotationsValidator/>
	<div class="container">
		<div class="card shadow">
				@*header*@
				<div class="card-header color-marcos">
					<h3 class="text-white"><strong>Crear Nuevo T&eacute;cnico</strong></h3>
				</div>
				@*body*@
				<div class="card-body">
					<div class="row">
						<div class="col-3">
						<label class="form-label text-naranja"><strong>Nombre</strong></label>
							<InputText class="form-control" @bind-Value="tecnico.Nombres"></InputText>
							<ValidationMessage For="(()=> tecnico.Nombres)" />

						<label class="form-label text-naranja"><strong>Sueldo por Hora</strong></label>
							<InputNumber class="form-control" @bind-Value="tecnico.SueldoHora"></InputNumber>
							<ValidationMessage For="(()=> tecnico.SueldoHora)" />
						</div>
					</div>
				</div>
				@*Footer*@
				<div class="card-footer">
					<table style="width: 31%;">
						<tr>
							<td style="text-align: left;">
							<button type="button" class="btn btn-NH bi bi-arrow-return-left" @onclick="Volver"></button>
							<button type="button" class="btn text-naranjaAzulH bi bi-arrow-counterclockwise" @onclick="Nuevo"></button>
							</td>
							<td style="text-align: right;">
							<button type="submit" class="btn btn-outline-success bi bi-floppy-fill"></button>
							</td>
						</tr>
					</table>
				</div>
			</div>
		<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopLeft" />
		</div>
</EditForm>

@code {
	public Tecnicos tecnico { get; set; } = new Tecnicos();

	public async Task Nuevo()
	{
		tecnico = new Tecnicos();
	}

	public async Task Guardar()
	{
		if (await Validar())
		{
			toastService.Notify(new(ToastType.Warning,
			iconName: IconName.None,
			title: "Error",
			helpText: $"Intente un nombre diferente. {DateTime.Now}",
			message: $"Este nombre esta ocupado por otro usuario."));
			return;
		}
		var crear = await tecnicoService.Guardar(tecnico);
		if (crear)
		{
			toastService.Notify(new(ToastType.Success,
			iconName: IconName.None,
			title: "Exito", 
			helpText: $"{DateTime.Now}",
			message: $"Se a guardo el tecnico correctamente."));
			Nuevo();
			Volver();
		}
		else
		{
			toastService.Notify(new(ToastType.Danger,
			iconName: IconName.None,
			title: "Error",
			helpText: $"{DateTime.Now}",
			message: $"No se agrego correctamente."));
		}
	}

	public async Task<bool> Validar()
	{
		var existe = await tecnicoService.ExisteTecnico(tecnico.Nombres,tecnico.TecnicoId);
		return existe;
	}

	public async Task Volver()
	{
		await Task.CompletedTask;
		navigationManager.NavigateTo("/Tecnico/Index");

	}
}
