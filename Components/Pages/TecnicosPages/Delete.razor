@page "/Tecnico/Delete/{TecnicoId:int}"
@inject TecnicoService tecnicoService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<EditForm Model="tecnicos">
	<div class="container-sm">
		<div class="card shadow-sm">
			@*header*@
			<div class="card-header color-marcos">

				<h2 class="text-white"><strong>Esta seguro de querer eliminar este t&eacute;cnico?</strong></h2>
			</div>
			@*body*@
			<div class="card-body">
				<ul>
					<li><strong class="text-naranja">Id: </strong><strong>@tecnicos.TecnicoId</strong></li>
					<li><strong class="text-naranja">Nombre: </strong><strong>@tecnicos.Nombre</strong></li>
					<li><strong class="text-naranja">Sueldo: </strong><strong>@tecnicos.SueldoHora</strong></li>
				</ul>
			</div>
			@*fotter*@
			<div class="card-footer">
				<table style="width: 15%;">
					<tr>
						<td style="text-align: left;">
							<button class="btn btn-NH bi bi-arrow-return-left" @onclick="Volver"></button>
						</td>
						<td style="text-align: right;">
							<button class="btn btn-outline-danger bi bi-trash3" @onclick="Eliminar"></button>
						</td>
					</tr>
				</table>
			</div>
		</div>
	</div>
</EditForm>
@code {
	[Parameter]
	public int TecnicoId { get; set; }
	public Tecnicos? tecnicos { get; set; } = new Tecnicos();

	protected override async Task OnInitializedAsync()
	{
		tecnicos = await tecnicoService.Buscar(TecnicoId);
	}

	public async Task Eliminar()
	{
			var eliminar = await tecnicoService.Eliminar(TecnicoId);
			toastService.Notify(new(ToastType.Danger,
			iconName: IconName.Trash3,
			title: "Eliminado",
			helpText: $"{DateTime.Now}",
			message: $"Se elimino el tecnico correctamente."));
			Volver();
	}

	public async Task Volver()
	{
		await Task.CompletedTask;
		navigationManager.NavigateTo("/Tecnico/Index");
	}
}
